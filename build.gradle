// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
plugins {
	// code
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
    id 'io.franzbecker.gradle-lombok' version '3.0.0'

    // code quality
    id "jacoco"
    id "org.owasp.dependencycheck" version "5.0.0-M2"

    // IDEs
    id "eclipse"
    id "idea"
    
    // publishing
    id "maven-publish"
    id "com.cinnober.gradle.semver-git" version "2.4.0"    
}

apply plugin: 'io.spring.dependency-management'

ext {
	set('springCloudVersion', 'Greenwich.SR1')
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.h2020.symbiote.ResourceAccessProxyApplication'
}

// XXX please change with your commits according to http://semver.org/
project.group = 'eu.h2020.symbiote'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// dependencies section
repositories {
	mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

// Spring related configs
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

/*
Forces dependencies' cache invalidation for each build for dependencies marked with
    { changing = true }
    e.g.
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT'){ changing = true }
 */
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

    /* SymbIoTeLibraries manual:
        One can use the library from jitpack by default with the notation:
            compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT') {changing = true }
        or having cloned locally the SymbIoTeLibraries repo use it directly with project dependency by:
            compile project(':SymbIoTeLibraries')
        Important --- In order to use the latter you need to:
            1) switch comments on the artifact and project dependencies
            2) always have only one uncommented
            3) project dependency requires changes in settings.gradle file in this project
            4) never commit build.gradle which has project dependencies active as it will break CI builds
    */

    implementation('com.github.symbiote-h2020:SymbIoTeLibraries:5.37+') { changing = true }
    implementation('com.github.symbiote-h2020:SymbIoTeLibraries:5.33+') { }
    // localMaven
    //implementation('eu.h2020.symbiote:SymbIoTeLibraries:5.29.0-SNAPSHOT')
    //implementation('com.github.symbiote-h2020:SymbIoTeSemantics:2.3.5')
    //implementation('org.apache.httpcomponents:httpcore:4.4.11')

    // Spring
    implementation('org.springframework.cloud:spring-cloud-starter')
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation('org.springframework.retry:spring-retry')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-starter-zipkin')
    implementation('org.springframework.boot:spring-boot-starter-amqp')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb')

    // OData
    implementation("org.apache.olingo:odata-commons-api:${'4.3.0'}")
    implementation("org.apache.olingo:odata-commons-core:${'4.3.0'}")
    
    implementation("org.apache.olingo:odata-server-api:${'4.3.0'}")
    implementation("org.apache.olingo:odata-server-core:${'4.3.0'}")
  
    // Websocket
    implementation("org.springframework.boot:spring-boot-starter-websocket")

    // Others
    implementation("com.jayway.jsonpath:json-path:2.4.0")

    // test only
    implementation("org.springframework.boot:spring-boot-starter-web")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    
    // lombok
    compileOnly('org.projectlombok:lombok')
    
    //Owlapi
    //compile('net.sourceforge.owlapi:owlapi-distribution:5.1.1')
    implementation('net.sourceforge.owlapi:owlapi-contract:5.1.1')
    implementation('net.sourceforge.owlapi:owlapi-util:3.3')
}

// publication
bootJar {
	classifier = 'run'
}

jar {
       baseName = 'ResourceAccessProxy'
       version = project.version
}
    
task generateJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = project.sourceSets.main.compileClasspath 
    destinationDir = reporting.file("javadocs")
}

task javadocJar(type: Jar, dependsOn: generateJavaDocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            version = project.version
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar

            artifact(file("$libsDir/$project.name-$project.version-${bootJar.classifier}.jar")) {
                classifier "run"
            }
        }
    }
}

publishToMavenLocal.dependsOn(bootJar)

// code quality below
// jacoco configuration section
jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// owasp config
dependencyCheck {
    outputDirectory = "build/reports/security"
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport) //, 'dependencyCheck')
